MESSAGE QUEUE:
A message queue is a linked list of messages stored within the kernel and
identified by a message queue identifier. A new queue is created or an existing
queue opened by msgget() . New messages are added to the end of a queue by
msgsnd() . Every message has a positive long integer type field, a non-negative
length, and the actual data bytes (corresponding to the length), all of which are
specified to msgsnd() when the message is added to a queue. Messages are
fetched from a queue by msgrcv(). We don't have to fetch the messages in a
first-in, first-out order. Instead, we can fetch messages based on their type field.

When msgsnd() returns successfully, the msgid structure associated with the
message queue is updated to indicate the process ID that made the call, the time
that the call was made the call, and that one more message is on the queue.
Messages are retrieved from a queue by msgrcv().


SYSTEM CALLS USED:

ftok(): ftok() is use to generate a unique key.

msgget(): msgget() either returns the message queue identifier for a newly created
message queue or returns the identifiers for a queue which exists with the same
key value.

msgsnd(): Data is placed on to a message queue by calling msgsnd(). The first argument to
msgsnd() is queue identifier, returned by previous call to msgget(). The pointer
argument points to a long integer followed by a data buffer for the actual
message data.

msgrcv(): using msgrcv() messages are retrieved from a queue.
msgctl(): it performs various operations on a queue. Generally it is use to destroy message
queue.




Note: Avoid using C++ for this as msgbuf is declared in <sys/msg.h> as well as in struct defination
it will cause conflicts